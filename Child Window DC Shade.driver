/**
 *  Child Window DC Shade
 *
 *  https://raw.githubusercontent.com/DanielOgorchock/ST_Anything/master/HubDuino/Drivers/child-window-shade.groovy
 *
 *  Copyright 2020 Daniel Ogorchock
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Change History:
 *
 *    Date        Who            What
 *    ----        ---            ----
 *    2020-06-25  Dan Ogorchock  Original Creation
 *    2021-01-22  Tim OCallaghan modified from original
 * 
 */
metadata {
	definition (name: "Child Window DC Shade", namespace: "ogiewon", author: "Tim OCallaghan") {
		capability "Window Shade"
        capability "Actuator"
		capability "Sensor"
        command "SetCloseTimeout", [[name:"CloseTimeoutSecs*", type: "NUMBER", description: "Specify the max timeout in seconds for the shade to close", required: true, range: "0..80"]]
        command "SetOpenTimeout", [[name:"OpenTimeoutSecs*", type: "NUMBER", description: "Specify the max timeout in seconds for the shade to open", required: true, range: "0..80"]]
        attribute "closetimeout", "Number" 
        attribute "opentimeout", "Number" 
        attribute "logEnable", "Boolean"
    }

    
    preferences {
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
	}
}

def logsOff(){
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable",[value:"false",type:"bool"])
    sendEvent(name: "logEnable", value: false)      
}

def logsOn(){
    log.warn "debug logging enabled..."
    device.updateSetting("logEnable",[value:"true",type:"bool"])
    sendEvent(name: "logEnable", value: true)      
}


def open() {
	sendData("open")
}

def close() {
	sendData("close")
}


def SetCloseTimeout(Number value) {
    if (logEnable) log.debug "SetCloseTimeout() called with ${value}"
    if (value > 0.0)
    {
       def str = "setclosetimeout:" + value.toString()
       sendData(str)
        
    }    
    else {
        log.error "Negative SetCloseTimeout value"
    }
}


def SetOpenTimeout(Number value) {
    if (logEnable) log.debug "SetOpenTimeout() called with ${value}"
    if (value > 0.0)
    {
       def str = "setopentimeout:" + value.toString()
       sendData(str)
        
    }    
    else {
        log.error "Negative SetOpenTimeout value"
    }
}



def setPosition(position) {

    if (position>50) {
        	sendData("open")
    } else {    
        	sendData("close")
    }    
}

def StartPositionChange(position) {
    log.info "StartPositionChange() not implemented"
}


def StopPositionChange(position) {
    log.info "StopPositionChange() not implemented"
}


def sendData(String value) {
    def name = device.deviceNetworkId.split("-")[-1]
    parent.sendData("${name} ${value}")  
}

//parse is called when something comes from the arduino...it gets processed and sent to hub
def parse(String description) {
     if (logEnable) log.debug "parse(${description}) called "

	def parts = description.split(" ")
    def name  = parts.length>0?parts[0].trim():null
    def value = parts.length>1?parts[1].trim():null
    def newparts = value.split(":")
    def newpartsize = newparts.size()
   
    if (newparts.size()>1) {
      def cmd = newparts.length>0?newparts[0].trim():null
      def timeout = newparts.length>1?newparts[1].trim():null
      sendEvent(name: cmd, value: timeout)
    } else {
        if (name && value) {
            //need to switch to be the correct name for the window shade capability attributes
            if (name == 'windowDCShade') {
                name = 'windowShade';
            }    
            sendEvent(name: name, value: value)    
        } else {
         	log.error "Missing either name or value.  Cannot parse!"
       }    
    } 
}

def installed() {
    updated()
}

def updated() {
    if (logEnable) runIn(1800,logsOff)
}
